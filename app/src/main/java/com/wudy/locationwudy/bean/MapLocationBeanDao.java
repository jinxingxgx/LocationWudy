package com.wudy.locationwudy.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MAP_LOCATION_BEAN".
*/
public class MapLocationBeanDao extends AbstractDao<MapLocationBean, Void> {

    public static final String TABLENAME = "MAP_LOCATION_BEAN";

    /**
     * Properties of entity MapLocationBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", false, "ID");
        public final static Property IndexId = new Property(1, String.class, "indexId", false, "INDEX_ID");
        public final static Property Latitude = new Property(2, double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(3, double.class, "longitude", false, "LONGITUDE");
        public final static Property Speed = new Property(4, float.class, "speed", false, "SPEED");
        public final static Property Direction = new Property(5, float.class, "direction", false, "DIRECTION");
        public final static Property Accuracy = new Property(6, float.class, "accuracy", false, "ACCURACY");
        public final static Property SatellitesNum = new Property(7, int.class, "satellitesNum", false, "SATELLITES_NUM");
        public final static Property Address = new Property(8, String.class, "address", false, "ADDRESS");
        public final static Property City = new Property(9, String.class, "city", false, "CITY");
        public final static Property Time = new Property(10, String.class, "time", false, "TIME");
    }


    public MapLocationBeanDao(DaoConfig config) {
        super(config);
    }
    
    public MapLocationBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MAP_LOCATION_BEAN\" (" + //
                "\"ID\" INTEGER NOT NULL ," + // 0: id
                "\"INDEX_ID\" TEXT," + // 1: indexId
                "\"LATITUDE\" REAL NOT NULL ," + // 2: latitude
                "\"LONGITUDE\" REAL NOT NULL ," + // 3: longitude
                "\"SPEED\" REAL NOT NULL ," + // 4: speed
                "\"DIRECTION\" REAL NOT NULL ," + // 5: direction
                "\"ACCURACY\" REAL NOT NULL ," + // 6: accuracy
                "\"SATELLITES_NUM\" INTEGER NOT NULL ," + // 7: satellitesNum
                "\"ADDRESS\" TEXT," + // 8: address
                "\"CITY\" TEXT," + // 9: city
                "\"TIME\" TEXT);"); // 10: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MAP_LOCATION_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MapLocationBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String indexId = entity.getIndexId();
        if (indexId != null) {
            stmt.bindString(2, indexId);
        }
        stmt.bindDouble(3, entity.getLatitude());
        stmt.bindDouble(4, entity.getLongitude());
        stmt.bindDouble(5, entity.getSpeed());
        stmt.bindDouble(6, entity.getDirection());
        stmt.bindDouble(7, entity.getAccuracy());
        stmt.bindLong(8, entity.getSatellitesNum());
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(9, address);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(10, city);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(11, time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MapLocationBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String indexId = entity.getIndexId();
        if (indexId != null) {
            stmt.bindString(2, indexId);
        }
        stmt.bindDouble(3, entity.getLatitude());
        stmt.bindDouble(4, entity.getLongitude());
        stmt.bindDouble(5, entity.getSpeed());
        stmt.bindDouble(6, entity.getDirection());
        stmt.bindDouble(7, entity.getAccuracy());
        stmt.bindLong(8, entity.getSatellitesNum());
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(9, address);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(10, city);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(11, time);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public MapLocationBean readEntity(Cursor cursor, int offset) {
        MapLocationBean entity = new MapLocationBean( //
            cursor.getInt(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // indexId
            cursor.getDouble(offset + 2), // latitude
            cursor.getDouble(offset + 3), // longitude
            cursor.getFloat(offset + 4), // speed
            cursor.getFloat(offset + 5), // direction
            cursor.getFloat(offset + 6), // accuracy
            cursor.getInt(offset + 7), // satellitesNum
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // address
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // city
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MapLocationBean entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setIndexId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLatitude(cursor.getDouble(offset + 2));
        entity.setLongitude(cursor.getDouble(offset + 3));
        entity.setSpeed(cursor.getFloat(offset + 4));
        entity.setDirection(cursor.getFloat(offset + 5));
        entity.setAccuracy(cursor.getFloat(offset + 6));
        entity.setSatellitesNum(cursor.getInt(offset + 7));
        entity.setAddress(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCity(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(MapLocationBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(MapLocationBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(MapLocationBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
